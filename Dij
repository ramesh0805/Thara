import java.util.Scanner;

public class DijkstraAlgorithm {

    private static final int INFINITY = Integer.MAX_VALUE;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int vertices = scanner.nextInt();

        int[][] graph = new int[vertices][vertices];

        System.out.println("Enter the adjacency matrix:");

        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        System.out.print("Enter the source vertex (0 to " + (vertices - 1) + "): ");
        int source = scanner.nextInt();

        dijkstra(graph, source);
        scanner.close();
    }

    private static void dijkstra(int[][] graph, int source) {
        int vertices = graph.length;
        boolean[] visited = new boolean[vertices];
        int[] distances = new int[vertices];

        for (int i = 0; i < vertices; i++) {
            distances[i] = INFINITY;
        }

        distances[source] = 0;

        for (int i = 0; i < vertices - 1; i++) {
            int minVertex = minDistanceVertex(distances, visited);
            visited[minVertex] = true;

            for (int j = 0; j < vertices; j++) {
                if (!visited[j] && graph[minVertex][j] != 0 && distances[minVertex] != INFINITY &&
                        distances[minVertex] + graph[minVertex][j] < distances[j]) {
                    distances[j] = distances[minVertex] + graph[minVertex][j];
                }
            }
        }

        printSolution(distances);
    }

    private static int minDistanceVertex(int[] distances, boolean[] visited) {
        int min = INFINITY;
        int minIndex = -1;

        for (int i = 0; i < distances.length; i++) {
            if (!visited[i] && distances[i] <= min) {
                min = distances[i];
                minIndex = i;
            }
        }

        return minIndex;
    }

    private static void printSolution(int[] distances) {
        System.out.println("Vertex   Distance from Source");
        for (int i = 0; i < distances.length; i++) {
            System.out.println(i + " \t\t " + distances[i]);
        }
    }
}


Enter the number of vertices: 5
Enter the adjacency matrix:
0 3 0 7 0
3 0 2 4 0
0 2 0 1 5
7 4 1 0 6
0 0 5 6 0
Enter the source vertex (0 to 4): 0
Vertex   Distance from Source
0         0
1         3
2         5
3         6
4         10
